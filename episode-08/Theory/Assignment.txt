1. How do you create Nested Routes react-router-dom configuration?

Ans:
 const router=createBrowserRouter([
    {
        path:"/",
        element= <AppLayout />,
        children:[
            {
                path:"/",
                element:<Body />

            },{
                path:"/about",
                element:<About />
            }
        ],
        errorElement:<Error />   
    }
] )


2. Read about createHashRouter, createMemoryRouter from React Router docs.

Ans:
createHashRouter:It is useful if you are unable to configure your web server to direct all traffic to your React Router application. Instead of using normal URLs, it will use the hash (#) portion of the URL to manage the "application URL". Other than that, it is functionally the same as createBrowserRouter.

createMemoryRouter: Instead of using the browsers history a memory router manages it's own history stack in memory. It's primarily useful for testing and component development tools like Storybook, but can also be used for running React Router in any non-browser 


3. What is the order of life cycle method calls in Class Based Components?


Ans:
1.constructor()
2.render()
3.componentDidMount()
4.componentDidUpdate()
5.componentWillUnmount()


4. Why do we use componentDidMount?


Ans: The componentDidMount() method allows us to execute the React code when the component is already placed in the DOM (Document Object Model). This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered. We can run any piece of react code to modify the components. For ex. It's the best place to make API calls.


5.Why do we use ComponentDidUnmount?

Ans:componentWillUnmount() is useful for the cleanup of the application when we switch routes from one place to another. Since we are working with a SPA(Single Page Application) the component process always runs in the background even if we switch to another route. So it is required to stop those processes before leaving the page. If we revisit the same page, a new process starts that affects the browser performance. For example, in Repo class, during componentDidMount() a timer is set with an interval of every one second to print in console. When the component is unmounted (users moves to a different page), the timer will be running in the background, which we might not even realize and causing huge performance issue. To avoid such situations the cleanup function can be done in componentWillUnmount, in this example clearInterval(timer) to clear the timer interval before unmounting Repo component.


6.Why do we use super(props) in constructor?

Ans:
super(props) in a constructor invokes the parent class's constructor, passing the props to initialize the parent's properties. It's necessary for accessing and utilizing parent class functionalities within the subclass.


7. Why can't we have the callback function of useEffect async?


Ans:
The useEffect callback cannot be async because it would return a promise, which is not allowed by the React rules for useEffect. The callback is expected to be synchronous for managing side effects efficiently and preventing race conditions.
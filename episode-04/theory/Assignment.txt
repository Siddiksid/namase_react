1.Is Jsx mandatory for React?

Ans:No Jsx is not mandatory for React but it is highly recommended as it enables us to write HTML like markup inside javascript.
It simplifies writing react component.Also it makes the code more concise and readable


2.Is ES6 mandatory for React?
{TitleComponent} vs {<TitleComponent/>} vs {<TitleComponent></TitleComponent>} in JSX.

Ans:Es6 is not mandatory but it is highly recommended.Arrow functions,classes ,variables makes development process Easier

{TitleComponent}:->It is Javscript expression or a variable

<TitleComponent/>:->This is a javascript component that returns a Jsx value

<TitleComponent></TitleComponent>:->This is a javascript components that includes child components

example:
 <TitleComponent>
    <FirstChildComponent />
    <SecondChildComponent />
    <ThirdChildComponent />
</TitleComponent>


3.How can I write comments in Jsx?

Ans:{/*  */} - for single or multiline comments

e.g:
    {/* A JSX comment */}

    {/*multiline
      comment
     */}

4. What is <React.Fragment></React.Fragment> and <></>?


Ans:<React.Fragment></React.Fragment> is a feature in React that allows you to return multiple elements from a React component by allowing you to
group a list of children without adding extra nodes to the DOM. <></> is the shorthand tag for React.Fragment. The only difference between them 
is that the shorthand version does not support the key attribute.

Example
return (
        <React.Fragment>
            <Header />
            <Navigation />
            <Main />
            <Footer />
        </React.Fragment>
    );

return (
        <>
            <Header />
            <Navigation />
            <Main />
            <Footer />
        </>
    );


5.What is virtual DOM?

Ans:The Virtual DOM (VDOM) is a concept in React where a virtual representation of the actual DOM is maintained. It enables efficient updates by calculating and applying only the necessary changes to the real DOM, reducing performance overhead. This approach improves the speed and responsiveness of React applications.



6.What is Reconciliation in React?

Ans:Reconciliation in React refers to the process of updating the real DOM to reflect changes made to a virtual representation of the DOM (Virtual DOM). When you make changes to a React component, React compares the new virtual DOM tree with the previous one, identifies the differences, and then updates the real DOM efficiently to reflect those changes. This optimization ensures that React minimizes the number of actual DOM manipulations, making your applications more performant and responsive.

7.What is React Fiber?

Ans:React Fiber is a complete rewrite of the React core algorithm for rendering components. It's designed to improve the performance and concurrency of React applications by breaking rendering work into smaller, prioritizable units called "fibers." This allows React to better manage updates, handle interruptions, and provide a smoother user experience, particularly in complex and interactive applications.


8.Why do we need keys in React?

Ans:A key is a special attribute you need to include when creating lists of elements in React. Keys are used in React to identify which items in the list are changed, updated, or deleted. In other words, we can say that keys are unique Identifier used to give an identity to the elements in the lists. Keys should be given to the elements within the array to give the elements a stable identity.

Example
<li key={0}>1</li>
<li key={1}>2</li>
<li key={2}>3</li>


9.Can we use index as keys in React?

Ans: Yes, we can use the index as keys, but it is not considered as a good practice to use them because if the order of items may change. This can negatively impact performance and may cause issues with component state. Keys are taken from each object which is being rendered. There might be a possibility that if we modify the incoming data react may render them in unusual order.


10. What is props in React? Ways to.

Ans:props stands for properties. Props are arguments passed into React components. props are used in React to pass data from one component to another (from a parent component to a child component(s)). They are useful when you want the flow of data in your app to be dynamic.


11.What is Config Driven UI?


Ans:A config-driven UI is a user interface design approach where the appearance and behavior of elements are determined by configuration settings or data, rather than being hard-coded. It allows for more flexibility and dynamic customization of UI components based on user preferences or application requirements. This approach often involves using configuration files, JSON objects, or other data structures to define how the UI elements should look and behave.


12.Difference between Virtual DOM and Real DOM?

Ans:Representation: Virtual DOM is an in-memory, lightweight representation of the actual DOM (Document Object Model) in a web application.
Updates: Virtual DOM allows React to efficiently update only the parts of the real DOM that have changed, reducing the need for direct manipulation of the actual DOM.
Performance: Manipulating the Real DOM can be slow and resource-intensive, while Virtual DOM minimizes these performance bottlenecks, resulting in faster and more efficient web applications.
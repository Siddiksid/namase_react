
What is a MicroService?

Ans:A microservice is a small, independently deployable software component that performs a specific function within a larger application. Microservices architecture breaks down complex applications into these modular units, allowing for easier development, scaling, and maintenance. Each microservice typically communicates with others via APIs, promoting flexibility and agility in software development.


2.What is Monolith Architecture?

Ans:Monolith architecture is a traditional software design approach where all components and functionalities of an application are tightly integrated into a single, monolithic codebase. In this architecture, different parts of the application share the same codebase and resources, making it simpler to develop but often harder to maintain and scale. Changes to one part of the application can impact the entire system, and scaling can be challenging due to the interdependencies.


3.What is the difference between Monolith and Microservice ?


Ans:
Monolith:

Monolith is a single, cohesive software application where all components are tightly integrated within a single codebase.
Changes or updates to one part of the application can affect the entire system, making maintenance and updates more complex.
Scalability can be challenging as the entire application needs to be scaled, even if only one component requires more resources.
Monoliths are typically easier to develop initially due to their simplicity.

Microservice:

Microservices are small, independently deployable components within an application, each responsible for a specific function.
Each microservice can be developed, deployed, and updated independently, making maintenance and updates more manageable.
Scalability is more flexible, as you can scale individual microservices to meet specific demands without affecting the entire application.
Microservices architectures promote agility but can be more complex to set up and manage due to the distributed nature of the components.


4.Why do we need a useEffect hook?

Ans:Managing side effects like data fetching or DOM manipulation.
Mimicking lifecycle methods for component initialization, updates, and cleanup.
Preventing infinite loops by specifying dependencies.
Handling asynchronous operations without blocking UI rendering.


5.What is optional chaining?

Ans:Optional chaining is a JavaScript feature (ECMAScript 2020) that allows safe access to object properties or methods. You use ?. before the property or method name to avoid errors if the property doesn't exist or is undefined. It simplifies handling potentially missing values, preventing "TypeError" exceptions, and making code more robust.


6.What is shimmer Ui?

Ans:Shimmer UI is a user interface design technique used to indicate loading or content placeholders in applications. It involves displaying animated, placeholder elements that mimic the appearance of real content. Shimmer UI provides visual feedback to users during data fetching, creating a smoother and more engaging loading experience. This technique is often used in mobile apps and websites to maintain user engagement and reduce perceived loading times.


7.What is the difference between js statements and js expressions?

Ans:Statements are code instructions that perform actions or tasks, like variable assignments, loops, or function declarations.
Statements do not necessarily produce a value or result that can be used in an expression.
Examples of statements include if statements, for loops, and function declarations.
JavaScript Expressions:

Expressions are code segments that produce a value when evaluated.
They can be used within statements, as part of variable assignments, or as function arguments.
Examples of expressions include arithmetic operations (5 + 3), variable references (myVar), and function calls (myFunction()).


8.What is conditional rendering? explain with an example?

Ans:Conditional rendering allows you to render different parts of your ui based on a conditional

example:
 const isLoggedin=false;

 {isLoggedin ? <p>You are Logged in</p> : <p>Please Login to continue </p>}


 9.What is CORS?

 Ans:CORS (Cross-Origin Resource Sharing) is a security feature implemented in web browsers. It controls which web domains or origins are allowed to make requests to a different domain for resources like data or scripts. CORS prevents unauthorized cross-origin requests, protecting sensitive data and resources. It is configured on the server-side using HTTP headers to specify which origins are permitted to access resources, ensuring safe communication between web applications.


 10.What is async and await?

 Ans:async: When you declare a function as async, it means the function will always return a promise, allowing you to use await inside it to pause execution until a promise is resolved.

await: Used inside an async function, await pauses the execution of the function until the promise it's awaiting is resolved, allowing you to work with the result as if it were synchronous code. This simplifies asynchronous code, making it look more like sequential, blocking code.


11.what is the use of 'const data=await data.json()' in getRestaurants?

Ans:Await the resolution of a Promise returned by the .json() method when fetching data from an API or reading a response stream.

It parses the JSON data from the response, converting it into a JavaScript object.

data now holds the JavaScript object representation of the JSON data, allowing you to work with it as a regular object in your code.